type AuctionBid @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  bidder: Bytes! # address
  amount: BigInt! # uint256
  extended: Boolean! # bool
  endTime: BigInt! # uint256
  auction: Auction!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionCreated @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  startTime: BigInt! # uint256
  endTime: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AuctionSettled @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  winner: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Auction @entity {
  id: Bytes!
  vote: Vote!
  tokenId: BigInt! # uint256
  startTime: BigInt! # uint256
  endTime: BigInt! # uint256
  amount: BigInt! # uint256
  extended: Boolean! # bool
  bidder: Bytes # address
  settled: Boolean! # bool
  contract: AuctionContract!
  bids: [AuctionBid!]! @derivedFrom(field: "auction")
}

type AuctionContract @entity {
  id: Bytes!
  treasury: Bytes! # address
  duration: BigInt! # uint256
  timeBuffer: BigInt! # uint256
  minBidIncrement: BigInt! # uint256
  launched: Boolean! # bool
  reservePrice: BigInt! # uint256
  reserveAddress: Bytes! # address
  raffleAddress: Bytes! # address
  votesURI: String!
  flashVotesURI: String!
  votesToken: Bytes! # address
  paused: Boolean! # bool
  auctions: [Auction!]! @derivedFrom(field: "contract")
}

type DurationUpdated @entity(immutable: true) {
  id: Bytes!
  duration: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MinBidIncrementPercentageUpdated @entity(immutable: true) {
  id: Bytes!
  minBidIncrementPercentage: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Paused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RaffleAddressUpdated @entity(immutable: true) {
  id: Bytes!
  raffleAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReserveAddressUpdated @entity(immutable: true) {
  id: Bytes!
  reserveAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ReservePriceUpdated @entity(immutable: true) {
  id: Bytes!
  reservePrice: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TimeBufferUpdated @entity(immutable: true) {
  id: Bytes!
  timeBuffer: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TreasuryAddressUpdated @entity(immutable: true) {
  id: Bytes!
  treasuryAddress: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Unpaused @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

enum QuestionState {
  Submitted
  Approved
  Used
  Flagged
}

type Question @entity {
  id: Bytes!
  vote: Vote!
  asker: Bytes!
  question: Bytes!
  state: QuestionState!
  modifiedTimestamp: BigInt! # uint256
  day: BigInt # uint256
  contract: QuestionsContract!
}

type QuestionsContract @entity {
  id: Bytes!
  votesAddress: Bytes! # address
  reviewerRole: Bytes! # bytes32
  questions: [Question!]! @derivedFrom(field: "contract")
}

type QuestionEdited @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  question: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type QuestionApproved @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type QuestionSubmitted @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  question: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type QuestionUsed @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type QuestionFlagged @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Approval @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  approved: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BatchMetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _fromTokenId: BigInt! # uint256
  _toTokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type MetadataUpdate @entity(immutable: true) {
  id: Bytes!
  _tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VotesRoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VotesRoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type VotesRoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Transfer @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  tokenId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Vote @entity {
 id: Bytes!
 tokenId: BigInt! # uint256
 auction: Auction
 owner: Bytes
 uri: String
 contract: VoteContract!
}

type VoteContract @entity {
 id: Bytes!
 name: String
 symbol: String
 totalSupply: BigInt!
 votes: [Vote!]! @derivedFrom(field: "contract")
}